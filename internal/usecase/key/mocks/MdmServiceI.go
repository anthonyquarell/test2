// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/mechta-market/e-product/internal/service/mdm/model"
)

// MdmServiceI is an autogenerated mock type for the MdmServiceI type
type MdmServiceI struct {
	mock.Mock
}

// FindProduct provides a mock function with given fields: ctx, productID
func (_m *MdmServiceI) FindProduct(ctx context.Context, productID *string) (*model.Product, bool, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for FindProduct")
	}

	var r0 *model.Product
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*model.Product, bool, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *model.Product); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) bool); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *string) error); ok {
		r2 = rf(ctx, productID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMdmServiceI creates a new instance of MdmServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMdmServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MdmServiceI {
	mock := &MdmServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
