// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/mechta-market/e-product/internal/domain/key/model"
)

// KeyServiceI is an autogenerated mock type for the KeyServiceI type
type KeyServiceI struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, obj
func (_m *KeyServiceI) Create(ctx context.Context, obj *model.Edit) (string, error) {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Edit) (string, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Edit) string); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Edit) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, ID, errNE
func (_m *KeyServiceI) Get(ctx context.Context, ID string, errNE bool) (*model.Main, bool, error) {
	ret := _m.Called(ctx, ID, errNE)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Main
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (*model.Main, bool, error)); ok {
		return rf(ctx, ID, errNE)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *model.Main); ok {
		r0 = rf(ctx, ID, errNE)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Main)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) bool); ok {
		r1 = rf(ctx, ID, errNE)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, bool) error); ok {
		r2 = rf(ctx, ID, errNE)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByOrderID provides a mock function with given fields: ctx, orderID, errNE
func (_m *KeyServiceI) GetByOrderID(ctx context.Context, orderID string, errNE bool) (*model.Main, bool, error) {
	ret := _m.Called(ctx, orderID, errNE)

	if len(ret) == 0 {
		panic("no return value specified for GetByOrderID")
	}

	var r0 *model.Main
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (*model.Main, bool, error)); ok {
		return rf(ctx, orderID, errNE)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *model.Main); ok {
		r0 = rf(ctx, orderID, errNE)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Main)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) bool); ok {
		r1 = rf(ctx, orderID, errNE)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, bool) error); ok {
		r2 = rf(ctx, orderID, errNE)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByValue provides a mock function with given fields: ctx, value
func (_m *KeyServiceI) GetByValue(ctx context.Context, value string) (*model.Main, error) {
	ret := _m.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for GetByValue")
	}

	var r0 *model.Main
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Main, error)); ok {
		return rf(ctx, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Main); ok {
		r0 = rf(ctx, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Main)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, pars
func (_m *KeyServiceI) List(ctx context.Context, pars *model.ListReq) ([]*model.Main, int64, error) {
	ret := _m.Called(ctx, pars)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*model.Main
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ListReq) ([]*model.Main, int64, error)); ok {
		return rf(ctx, pars)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.ListReq) []*model.Main); ok {
		r0 = rf(ctx, pars)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Main)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.ListReq) int64); ok {
		r1 = rf(ctx, pars)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.ListReq) error); ok {
		r2 = rf(ctx, pars)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, edit
func (_m *KeyServiceI) Update(ctx context.Context, edit *model.Edit) error {
	ret := _m.Called(ctx, edit)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Edit) error); ok {
		r0 = rf(ctx, edit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewKeyServiceI creates a new instance of KeyServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyServiceI {
	mock := &KeyServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
