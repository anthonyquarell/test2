// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/mechta-market/e-product/internal/service/provider/model"
)

// ProviderServiceI is an autogenerated mock type for the ProviderServiceI type
type ProviderServiceI struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: ctx, req
func (_m *ProviderServiceI) CancelOrder(ctx context.Context, req *model.CancelRequest) (*model.CancelResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 *model.CancelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CancelRequest) (*model.CancelResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CancelRequest) *model.CancelResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CancelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CancelRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: ctx, obj
func (_m *ProviderServiceI) CreateOrder(ctx context.Context, obj *model.OrderRequest) (*model.OrderResponse, error) {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *model.OrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderRequest) (*model.OrderResponse, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderRequest) *model.OrderResponse); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OrderRequest) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCatalog provides a mock function with given fields: ctx, providerID
func (_m *ProviderServiceI) ListCatalog(ctx context.Context, providerID string) ([]*model.CatalogResponse, error) {
	ret := _m.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for ListCatalog")
	}

	var r0 []*model.CatalogResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.CatalogResponse, error)); ok {
		return rf(ctx, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.CatalogResponse); ok {
		r0 = rf(ctx, providerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CatalogResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SupportsPool provides a mock function with no fields
func (_m *ProviderServiceI) SupportsPool() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SupportsPool")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewProviderServiceI creates a new instance of ProviderServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderServiceI {
	mock := &ProviderServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
