// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: electronic_product/electronic_product_v1.proto

package electronic_product_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Key_Load_FullMethodName           = "/electronic_product_v1.Key/Load"
	Key_List_FullMethodName           = "/electronic_product_v1.Key/List"
	Key_Get_FullMethodName            = "/electronic_product_v1.Key/Get"
	Key_Activate_FullMethodName       = "/electronic_product_v1.Key/Activate"
	Key_GetByProductID_FullMethodName = "/electronic_product_v1.Key/GetByProductID"
)

// KeyClient is the client API for Key service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyClient interface {
	Load(ctx context.Context, in *LoadKeyReq, opts ...grpc.CallOption) (*LoadKeyRep, error)
	List(ctx context.Context, in *KeyListReq, opts ...grpc.CallOption) (*KeyListRep, error)
	Get(ctx context.Context, in *KeyGetReq, opts ...grpc.CallOption) (*KeyGetRep, error)
	Activate(ctx context.Context, in *KeyActivateReq, opts ...grpc.CallOption) (*KeyActivateRep, error)
	// mdm
	GetByProductID(ctx context.Context, in *GetByProductIDReq, opts ...grpc.CallOption) (*GetByProductIDRep, error)
}

type keyClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyClient(cc grpc.ClientConnInterface) KeyClient {
	return &keyClient{cc}
}

func (c *keyClient) Load(ctx context.Context, in *LoadKeyReq, opts ...grpc.CallOption) (*LoadKeyRep, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadKeyRep)
	err := c.cc.Invoke(ctx, Key_Load_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyClient) List(ctx context.Context, in *KeyListReq, opts ...grpc.CallOption) (*KeyListRep, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyListRep)
	err := c.cc.Invoke(ctx, Key_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyClient) Get(ctx context.Context, in *KeyGetReq, opts ...grpc.CallOption) (*KeyGetRep, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyGetRep)
	err := c.cc.Invoke(ctx, Key_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyClient) Activate(ctx context.Context, in *KeyActivateReq, opts ...grpc.CallOption) (*KeyActivateRep, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyActivateRep)
	err := c.cc.Invoke(ctx, Key_Activate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyClient) GetByProductID(ctx context.Context, in *GetByProductIDReq, opts ...grpc.CallOption) (*GetByProductIDRep, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByProductIDRep)
	err := c.cc.Invoke(ctx, Key_GetByProductID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyServer is the server API for Key service.
// All implementations must embed UnimplementedKeyServer
// for forward compatibility.
type KeyServer interface {
	Load(context.Context, *LoadKeyReq) (*LoadKeyRep, error)
	List(context.Context, *KeyListReq) (*KeyListRep, error)
	Get(context.Context, *KeyGetReq) (*KeyGetRep, error)
	Activate(context.Context, *KeyActivateReq) (*KeyActivateRep, error)
	// mdm
	GetByProductID(context.Context, *GetByProductIDReq) (*GetByProductIDRep, error)
	mustEmbedUnimplementedKeyServer()
}

// UnimplementedKeyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyServer struct{}

func (UnimplementedKeyServer) Load(context.Context, *LoadKeyReq) (*LoadKeyRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedKeyServer) List(context.Context, *KeyListReq) (*KeyListRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedKeyServer) Get(context.Context, *KeyGetReq) (*KeyGetRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKeyServer) Activate(context.Context, *KeyActivateReq) (*KeyActivateRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedKeyServer) GetByProductID(context.Context, *GetByProductIDReq) (*GetByProductIDRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByProductID not implemented")
}
func (UnimplementedKeyServer) mustEmbedUnimplementedKeyServer() {}
func (UnimplementedKeyServer) testEmbeddedByValue()             {}

// UnsafeKeyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyServer will
// result in compilation errors.
type UnsafeKeyServer interface {
	mustEmbedUnimplementedKeyServer()
}

func RegisterKeyServer(s grpc.ServiceRegistrar, srv KeyServer) {
	// If the following call pancis, it indicates UnimplementedKeyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Key_ServiceDesc, srv)
}

func _Key_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Key_Load_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServer).Load(ctx, req.(*LoadKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Key_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Key_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServer).List(ctx, req.(*KeyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Key_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Key_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServer).Get(ctx, req.(*KeyGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Key_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyActivateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Key_Activate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServer).Activate(ctx, req.(*KeyActivateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Key_GetByProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByProductIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServer).GetByProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Key_GetByProductID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServer).GetByProductID(ctx, req.(*GetByProductIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Key_ServiceDesc is the grpc.ServiceDesc for Key service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Key_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "electronic_product_v1.Key",
	HandlerType: (*KeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Load",
			Handler:    _Key_Load_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Key_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Key_Get_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _Key_Activate_Handler,
		},
		{
			MethodName: "GetByProductID",
			Handler:    _Key_GetByProductID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "electronic_product/electronic_product_v1.proto",
}
